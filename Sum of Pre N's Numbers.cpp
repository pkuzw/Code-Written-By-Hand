///@file 有两个长度为N的序列A和B，在A和B中各取一个数可以得到N^2个和，求这N^2个和中最小的N个
///@author zhaowei
///@date 2014.11.30
///@version 1.0
/*@note 
输入
第一行输入一个正整数N；第二行N 个整数Ai 且Ai  109；第三行N 个整数Bi，且Bi  109。

输出
输出仅一行，包含N 个整数，从小到大输出这N 个最小的和，相邻数字之间用空格
隔开。

样例输入
51
3 2 4 5
6 3 4 1 7

样例输出
2 3 4 4 5

由于数据量是N^2，如果用朴素的先求和再排序的方法来解决，时间复杂度是O(n^2lgn)，会比较费时。采用堆来解决该问题。
首先将A，B两数组排序，我们可以建立如下的有序表：
A1 + B1 < A1 + B2 < A1 + B3 < ... < A1 + Bn
A2 + B1 < A2 + B2 < A2 + B3 < ... < A2 + Bn
... ...
An + B1 < An + B2 < An + B3 < ... < An + Bn
先将A[i] + B[0]压入堆中，设每次出堆的元素为sum = A[a] + B[b]，则将A[a] + B[b + 1]入堆，这样可以保证前n个出堆的元素为最小的前n项。
在实现的时候可以不用保存B数组的下标，通过sum - B[b] + B[b + 1]来替换A[a] + B[b + 1]，这样能够节省空间

*/


